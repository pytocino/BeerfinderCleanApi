## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Gestión de Reportes'
description: |-

  APIs para gestionar reportes de contenido inapropiado (solo administradores)
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/reports
    metadata:
      groupName: 'Gestión de Reportes'
      groupDescription: |-

        APIs para gestionar reportes de contenido inapropiado (solo administradores)
      subgroup: ''
      subgroupDescription: ''
      title: 'Listar reportes'
      description: 'Obtiene un listado paginado de reportes con opciones de filtrado.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      status:
        name: status
        description: 'Filtrar por estado (pending, reviewed, rejected, actioned).'
        required: false
        example: pending
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      type:
        name: type
        description: 'Filtrar por tipo de contenido (comment, check_in, etc.).'
        required: false
        example: comment
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      per_page:
        name: per_page
        description: 'Elementos por página (5-50).'
        required: false
        example: 15
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      status: pending
      type: comment
      per_page: 15
    bodyParameters:
      status:
        name: status
        description: ''
        required: false
        example: actioned
        type: string
        enumValues:
          - pending
          - reviewed
          - rejected
          - actioned
        exampleWasSpecified: false
        nullable: true
        custom: []
      type:
        name: type
        description: ''
        required: false
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      per_page:
        name: per_page
        description: 'Must be at least 5. Must not be greater than 50.'
        required: false
        example: 22
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
    cleanBodyParameters:
      status: actioned
      type: architecto
      per_page: 22
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": [
              {
                "id": 1,
                "reason": "offensive",
                "details": "Contiene lenguaje ofensivo e insultos.",
                "status": "pending",
                "reporter": {
                  "id": 2,
                  "name": "Juan Pérez"
                },
                "content_type": "comment",
                "content_id": 105,
                "created_at": "2023-04-18T19:15:00.000000Z"
              }
            ],
            "links": {...},
            "meta": {...}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/reports/{id}'
    metadata:
      groupName: 'Gestión de Reportes'
      groupDescription: |-

        APIs para gestionar reportes de contenido inapropiado (solo administradores)
      subgroup: ''
      subgroupDescription: ''
      title: 'Obtener detalles de un reporte'
      description: 'Obtiene información detallada de un reporte específico.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'ID del reporte.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
              "id": 1,
              "reason": "offensive",
              "details": "Contiene lenguaje ofensivo e insultos.",
              "status": "pending",
              "reporter": {
                "id": 2,
                "name": "Juan Pérez"
              },
              "content_type": "comment",
              "content_id": 105,
              "created_at": "2023-04-18T19:15:00.000000Z",
              "admin_notes": null
            },
            "reported_content": {
              "id": 105,
              "content": "Este es un comentario ofensivo que ha sido reportado.",
              "user": {
                "id": 3,
                "name": "Ana García"
              }
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No se ha encontrado el reporte solicitado."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/v1/reports/{id}'
    metadata:
      groupName: 'Gestión de Reportes'
      groupDescription: |-

        APIs para gestionar reportes de contenido inapropiado (solo administradores)
      subgroup: ''
      subgroupDescription: ''
      title: 'Actualizar estado de un reporte'
      description: 'Actualiza el estado de un reporte y opcionalmente agrega notas administrativas.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'ID del reporte.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      status:
        name: status
        description: 'Nuevo estado (reviewed, rejected, actioned).'
        required: true
        example: reviewed
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      admin_notes:
        name: admin_notes
        description: 'Notas administrativas sobre la resolución.'
        required: false
        example: 'Contenido revisado y advertencia enviada al usuario.'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      status: reviewed
      admin_notes: 'Contenido revisado y advertencia enviada al usuario.'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Reporte actualizado correctamente.",
            "data": {
              "id": 1,
              "status": "reviewed",
              "resolved_at": "2023-04-19T10:30:00.000000Z",
              "admin_notes": "Contenido revisado y advertencia enviada al usuario."
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No se ha encontrado el reporte solicitado."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
